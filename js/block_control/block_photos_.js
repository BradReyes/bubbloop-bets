// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.block_photos_ = (function() {
  function block_photos_() {
    this.run = bind(this.run, this);
    this.get_closest_user = bind(this.get_closest_user, this);
    this.get_media = bind(this.get_media, this);
    this.expand = bind(this.expand, this);
    this.blacken_background = bind(this.blacken_background, this);
    var css;
    css = "#first-input{\n	position: absolute;\n	top: 30%;\n	width: 80%;\n	left: 6%;\n	text-align: center;\n	font-size: 12px;\n}\n\n#second-input{\n	position: absolute;\n	top: 60%;\n	width: 80%;\n	left: 6%;\n	text-align: center;\n	font-size: 12px;\n}\n\ninput[type='text'],\ninput[type='number'],\ntextarea {\n	font-size: 16px;\n}";
    $('<style type="text/css"></style>').html(css).appendTo("head");
    $("<div class=\"drag-wrap draggable source Who\" name=\"photos\">\n	<input id=\"first-input\" type=\"text\" value=\"\">\n	<input id=\"second-input\" type=\"text\" value=\"\">\n	<div id='instafeed' style='display:none'></div>\n</div>").appendTo(".drag-zone");
    interact("#first-input").on('tap', (function(_this) {
      return function(event) {
        event.preventDefault();
        $("#first-input").focus();
        return _this.expand("#first-input");
      };
    })(this));
    interact("#second-input").on('tap', (function(_this) {
      return function(event) {
        event.preventDefault();
        $("#second-input").focus();
        return _this.expand("#second-input");
      };
    })(this));
  }

  block_photos_.prototype.blacken_background = function() {
    var $blacken;
    $blacken = $("<div id='blacken-input'>");
    $blacken.css({
      zIndex: 500,
      backgroundColor: 'rgba(0,0,0,0.5)',
      width: '100%',
      height: '100%',
      position: 'absolute',
      left: 0,
      top: 0
    });
    return $("body").prepend($blacken);
  };

  block_photos_.prototype.expand = function(selector) {
    var $popup_input, actual, actual_height, box_width, height, left, original_height, original_width, position, scale, scaled, str_length, value, width;
    this.blacken_background();
    height = document.documentElement.clientHeight;
    width = document.documentElement.clientWidth;
    box_width = width / 2;
    left = width / 2 - box_width / 2;
    value = $(selector).val();
    $popup_input = $("<input id='popup-input' type='text'>");
    $popup_input.val(value);
    $popup_input.appendTo($("body"));
    str_length = $popup_input.val().length * 2;
    $popup_input.focus();
    $popup_input[0].setSelectionRange(str_length, str_length);
    position = $(selector).offset();
    actual = $(selector)[0].getBoundingClientRect().width;
    actual_height = $(selector)[0].getBoundingClientRect().height;
    scaled = $(selector)[0].offsetWidth;
    scale = actual / scaled;
    original_width = $(selector).innerWidth();
    original_height = $(selector).innerHeight();
    $("#popup-input").css({
      zIndex: 600,
      position: "fixed",
      left: position.left,
      top: position.top,
      fontSize: 16,
      textAlign: 'center',
      width: original_width * scale + 1,
      height: actual_height
    });
    $popup_input.velocity({
      width: box_width,
      height: original_height,
      top: height / 2,
      left: left
    });
    $("#popup-input").on('keyup', (function(_this) {
      return function(event) {
        var new_value;
        if (event.which === 13) {
          return $("#popup-input").blur();
        } else {
          new_value = $("#popup-input").val();
          return $(selector).val(new_value);
        }
      };
    })(this));
    return $("#popup-input").blur((function(_this) {
      return function() {
        $("#blacken-input").remove();
        return $("#popup-input").remove();
      };
    })(this));
  };

  block_photos_.prototype.get_media = function(media_id, cb, player1) {
    var access_token, get_url;
    access_token = "2072221807.1677ed0.cfc898e6c7124300bb90d836f3e14e9d";
    get_url = "https://api.instagram.com/v1/media/" + media_id + "?access_token=" + access_token;
    return $.ajax({
      url: get_url,
      dataType: "jsonp",
      success: (function(_this) {
        return function(data) {
          console.log(data);
          if (player1) {
            console.log("Player1");
            _this.competitors.first_val[1] = data.data;
          } else {
            console.log("Player2");
            _this.competitors.second_val[1] = data.data;
          }
          if (_this.both_medias_finished) {
            return cb(_this.competitors);
          } else {
            return _this.both_medias_finished = true;
          }
        };
      })(this)
    });
  };

  block_photos_.prototype.get_closest_user = function(username, cb) {
    var access_token, encoded_username, get_url;
    encoded_username = encodeURIComponent(username);
    access_token = "2072221807.1677ed0.cfc898e6c7124300bb90d836f3e14e9d";
    get_url = "https://api.instagram.com/v1/users/search?q=" + encoded_username + "&access_token=" + access_token;
    return $.ajax({
      url: get_url,
      dataType: "jsonp",
      success: (function(_this) {
        return function(data) {
          var i, len, matching_id, user, user_list;
          user_list = data.data;
          console.log("USER LIST HERE");
          console.log(user_list);
          matching_id = user_list[0].id;
          for (i = 0, len = user_list.length; i < len; i++) {
            user = user_list[i];
            if (user.username === username) {
              matching_id = user.id;
              break;
            }
          }
          return cb(matching_id);
        };
      })(this)
    });
  };

  block_photos_.prototype.run = function(cb) {
    var both_users_loaded, find_feeds, first_val, second_val;
    find_feeds = (function(_this) {
      return function(first, second) {
        var both_done, first_feed, second_feed;
        console.log(first);
        console.log(second);
        both_done = false;
        _this.competitors = {
          "first_val": [first, null],
          "second_val": [second, null]
        };
        first_feed = new Instafeed({
          get: 'user',
          userId: parseInt(first),
          accessToken: '2072221807.1677ed0.cfc898e6c7124300bb90d836f3e14e9d',
          clientId: 'f41df43206564056b252ae8a5cb4019e',
          limit: 60,
          error: function() {
            return alert("instagram error");
          },
          success: function(json) {
            var cur, i, len, list;
            list = json.data;
            for (i = 0, len = list.length; i < len; i++) {
              cur = list[i];
              console.log(cur);
              _this.competitors.first_val[1] = cur;
              break;
            }
            if (both_done) {
              console.log(_this.competitors);
              return cb(_this.competitors);
            } else {
              return both_done = true;
            }
          }
        });
        first_feed.run();
        second_feed = new Instafeed({
          get: 'user',
          userId: parseInt(second),
          accessToken: '2072221807.1677ed0.cfc898e6c7124300bb90d836f3e14e9d',
          clientId: 'f41df43206564056b252ae8a5cb4019e',
          limit: 60,
          error: function() {
            return alert("instagram error");
          },
          success: function(json) {
            var cur, i, len, list;
            list = json.data;
            for (i = 0, len = list.length; i < len; i++) {
              cur = list[i];
              console.log(cur);
              _this.competitors.second_val[1] = cur;
              break;
            }
            if (both_done) {
              console.log(_this.competitors);
              return cb(_this.competitors);
            } else {
              return both_done = true;
            }
          }
        });
        return second_feed.run();
      };
    })(this);
    both_users_loaded = false;
    first_val = $("#first-input").val();
    second_val = $("#second-input").val();
    if ((this.player1_id != null) && (this.player2_id != null) && (this.competitors != null)) {
      this.both_medias_finished = false;
      this.get_media(this.competitors.first_val[1].id, cb, true);
      return this.get_media(this.competitors.second_val[1].id, cb, false);
    } else {
      this.get_closest_user(first_val, (function(_this) {
        return function(id) {
          _this.player1_id = id;
          if (both_users_loaded) {
            console.log("going into feed");
            return find_feeds(_this.player1_id, _this.player2_id);
          } else {
            return both_users_loaded = true;
          }
        };
      })(this));
      return this.get_closest_user(second_val, (function(_this) {
        return function(id) {
          _this.player2_id = id;
          if (both_users_loaded) {
            return find_feeds(_this.player1_id, _this.player2_id);
          } else {
            both_users_loaded = true;
            return console.log("not last one");
          }
        };
      })(this));
    }
  };

  return block_photos_;

})();
