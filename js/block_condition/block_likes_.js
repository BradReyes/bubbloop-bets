// Generated by CoffeeScript 1.9.3
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.block_likes_ = (function() {
  function block_likes_() {
    this.run = bind(this.run, this);
    this.expand = bind(this.expand, this);
    this.blacken_background = bind(this.blacken_background, this);
    var css;
    css = "#likes-input{\n	position: absolute;\n	top: 55%;\n	width: 80%;\n	left: 6%;\n	text-align: center;\n	font-size: 12px;\n}\n\ninput[type='text'],\ninput[type='number'],\ntextarea {\n	font-size: 16px;\n}";
    $('<style type="text/css"></style>').html(css).appendTo("head");
    $("<div class=\"drag-wrap draggable filter\" name=\"likes\">\n	LIKES\n	<input id=\"likes-input\" type=\"text\" value=\"\">\n</div>").appendTo(".drag-zone");
    interact("#likes-input").on('tap', (function(_this) {
      return function(event) {
        event.preventDefault();
        $("#likes-input").focus();
        return _this.expand("#likes-input");
      };
    })(this));
  }

  block_likes_.prototype.blacken_background = function() {
    var $blacken;
    $blacken = $("<div id='blacken-input'>");
    $blacken.css({
      zIndex: 500,
      backgroundColor: 'rgba(0,0,0,0.5)',
      width: '100%',
      height: '100%',
      position: 'absolute',
      left: 0,
      top: 0
    });
    return $("body").prepend($blacken);
  };

  block_likes_.prototype.expand = function(selector) {
    var $popup_input, actual, actual_height, box_width, height, left, original_height, original_width, position, scale, scaled, str_length, value, width;
    this.blacken_background();
    height = document.documentElement.clientHeight;
    width = document.documentElement.clientWidth;
    box_width = width / 2;
    left = width / 2 - box_width / 2;
    value = $(selector).val();
    $popup_input = $("<input id='popup-input' type='text'>");
    $popup_input.val(value);
    $popup_input.appendTo($("body"));
    str_length = $popup_input.val().length * 2;
    $popup_input.focus();
    $popup_input[0].setSelectionRange(str_length, str_length);
    position = $(selector).offset();
    actual = $(selector)[0].getBoundingClientRect().width;
    actual_height = $(selector)[0].getBoundingClientRect().height;
    scaled = $(selector)[0].offsetWidth;
    scale = actual / scaled;
    original_width = $(selector).innerWidth();
    original_height = $(selector).innerHeight();
    $("#popup-input").css({
      zIndex: 600,
      position: "fixed",
      left: position.left,
      top: position.top,
      fontSize: 16,
      textAlign: 'center',
      width: original_width * scale + 1,
      height: actual_height
    });
    $popup_input.velocity({
      width: box_width,
      height: original_height,
      top: height / 2,
      left: left
    });
    $("#popup-input").on('keyup', (function(_this) {
      return function(event) {
        var new_value;
        if (event.which === 13) {
          return $("#popup-input").blur();
        } else {
          new_value = $("#popup-input").val();
          return $(selector).val(new_value);
        }
      };
    })(this));
    return $("#popup-input").blur((function(_this) {
      return function() {
        $("#blacken-input").remove();
        return $("#popup-input").remove();
      };
    })(this));
  };

  block_likes_.prototype.run = function(competitors, cb) {
    var player1, player1_likes, player2, player2_likes;
    if (this.num_likes == null) {
      console.log($("#likes-input").val());
      this.num_likes = parseInt($("#likes-input").val());
    }
    console.log(this.num_likes);
    player1 = competitors.first_val;
    player2 = competitors.second_val;
    player1_likes = player1[1].likes.count;
    player2_likes = player2[1].likes.count;
    $("#instagram-matchup-counter-1").text("LIKES: " + player1_likes);
    $("#instagram-matchup-counter-2").text("LIKES: " + player2_likes);
    $("#put-goal-here").text(this.num_likes);
    if (player1_likes >= this.num_likes) {
      return cb(competitors.first_val[1], true);
    } else if (player2_likes >= this.num_likes) {
      return cb(competitors.second_val[1], false);
    } else {
      return cb();
    }
  };

  return block_likes_;

})();
